AUTOMATION FRAMEWORK GUIDE FOR LLMs

When generating code for this automation framework, follow these guidelines to create valid and type-safe automations:

1. BASIC STRUCTURE
Every automation must export a fetch handler and use this structure:

```typescript
import { task, automate } from 'automate-new-sdk';
import { z } from 'zod';

// Define your schemas
const YourParams = z.object({...});
type YourParams = z.infer<typeof YourParams>;

// Create your task
const yourTask = task({
  name: "your-task-name",
  description: "What your task does",
  version: "1.0.0",
  triggers: [...],
  steps: [...]  // Define AI agent workflow steps
});

// Initialize and export
const app = automate.serve(yourTask);
export default {
  fetch: app.fetch.bind(app)
};
```

2. TASK COMPONENTS

a) Task Metadata:
```typescript
{
  name: string;         // Unique identifier for the task
  description: string;  // What the task does
  version: string;      // Semantic version
}
```

b) Triggers:
You must implement one or more trigger types:

Manual Trigger:
```typescript
{
  type: "manual",
  schema: z.ZodType    // Validates input data
}
```

Scheduled Trigger:
```typescript
{
  type: "scheduled",
  cron: "* * * * *"    // Standard cron syntax (UTC)
}
```

c) Steps:
Each step in the AI agent workflow:
```typescript
{
  prompt: string;       // Instructions for the AI
  maxSteps: number;     // Maximum iterations allowed
  tools: string[];      // Available tools for this step
}
```

3. TOOLS
Tools are specified at the step level:
```typescript
tools: [
  "WEB_SEARCH",        // Search the web for information
  "EXECUTE_CODE",      // Run code snippets
  "READ_FILE",         // Read file contents
  // ... other available tools
]
```

4. PARAMETER VALIDATION
Always use Zod for parameter validation:
- Define schemas for manual triggers
- Use z.object() for structured data
- Add .describe() for documentation
- Use type inference with z.infer<>

5. VALIDATION COMMAND
Use the built-in validation command to verify your tasks:
```bash
npx automate-new-sdk validate
```
This will:
- Validate task structure
- Check trigger configurations
- Verify step definitions
- Ensure tool specifications are correct

6. ENDPOINTS CREATED
Your automation will create these endpoints:
- GET /                     -> Health check
- POST /trigger/{index}     -> Trigger endpoints (manual/scheduled)

7. BEST PRACTICES
- Use descriptive names for tasks and steps
- Add proper descriptions
- Validate all manual trigger inputs with Zod
- Keep steps focused and atomic
- Specify only necessary tools per step
- Use proper TypeScript types
- Test with the validation command before deploying

8. EXAMPLE TASK

```typescript
import { task, automate } from 'automate-new-sdk';
import { z } from 'zod';

const InputSchema = z.object({
  query: z.string().min(1).describe('Search query')
});

const searchTask = task({
  name: "web-search-task",
  description: "Searches the web and summarizes results",
  version: "1.0.0",
  triggers: [
    {
      type: "manual",
      schema: InputSchema
    },
    {
      type: "scheduled",
      cron: "0 9 * * *"  // Daily at 9 AM UTC
    }
  ],
  steps: [
    {
      prompt: "Search the web for the provided query and summarize the results",
      maxSteps: 3,
      tools: ["WEB_SEARCH"]
    },
    {
      prompt: "Format the summary in markdown",
      maxSteps: 1,
      tools: []
    }
  ]
});

const app = automate.serve(searchTask);
export default {
  fetch: app.fetch.bind(app)
};
```

9. COMMON MISTAKES TO AVOID
- Don't specify tools at the task level (use step level)
- Don't skip the validation command
- Don't forget to bind the fetch handler
- Don't mix trigger types incorrectly
- Don't omit maxSteps in step definitions
- Don't use unavailable tools
- Don't forget to validate manual trigger inputs

Remember: The framework is designed for Cloudflare Workers, so all code should be compatible with that environment. 